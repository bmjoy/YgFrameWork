using System.Collections.Generic;
using System;
using UnityEngine;

namespace Tool.Database
{
    public class $DataClassName
    {
        $DataAttributes
    }

    public class $DataTypeName : IDatabase
    {
        public const uint TYPE_ID =$DataID;
        public const string DATA_PATH =$DataPath;

        private List<$DataClassName> m_datas;

        public  $DataTypeName() { }

        public uint TypeID()
        {
            return TYPE_ID;
        }

        public string DataPath()
        {
            return DATA_PATH;
        }

        public void Load()
        {
            TextAsset textAsset = Resources.Load<TextAsset>(DataPath());
            m_datas = GetAllData(CSVConverter.SerializeCSVData(textAsset));
        }

		private List<$DataClassName> GetAllData(string[][] m_datas)
		{
			List<$DataClassName> m_tempList = new List<$DataClassName>();
			for (int i = 0; i < m_datas.Length; i++)
            {
				$DataClassName m_tempData = new $DataClassName();
                $CsvSerialize
				m_tempList.Add(m_tempData);
            }
            return m_tempList;
		}

        public $DataClassName GetDataByKey(string key)
        {
			return m_datas.Find($DataKey);
        }

		public List<$DataClassName> FindAll(Predicate<$DataClassName> handler = null)
		{
			if (handler == null)
            {
                return m_datas;
            }
            else
            {
                return m_datas.FindAll(handler);
            }
		}

        public int GetCount()
        {
			return m_datas.Count;
        }
    }
}
